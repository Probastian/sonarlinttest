/* ESP32 Weather Display using an EPD 4.2" Display, obtains data from Open Weather Map, decodes it and then displays it.
  ####################################################################################################################################
  This software, the ideas and concepts is Copyright (c) David Bird 2018. All rights to this software are reserved.

  Any redistribution or reproduction of any part or all of the contents in any form is prohibited other than the following:
  1. You may print or download to a local hard disk extracts for your personal and non-commercial use only.
  2. You may copy the content to individual third parties for their personal use, but only if you acknowledge the author David Bird as the source of the material.
  3. You may not, except with my express written permission, distribute or commercially exploit the content.
  4. You may not transmit it or store it in any other website or other form of electronic retrieval system for commercial purposes.

  The above copyright ('as annotated') notice and this permission notice shall be included in all copies or substantial portions of the Software and where the
  software use is visible to an end-user.

  THE SOFTWARE IS PROVIDED "AS IS" FOR PRIVATE USE ONLY, IT IS NOT FOR COMMERCIAL USE IN WHOLE OR PART OR CONCEPT. FOR PERSONAL USE IT IS SUPPLIED WITHOUT WARRANTY
  OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHOR OR COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTH ERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  See more at http://www.dsbird.org.uk
*/

#include "Arduino.h"
#include "owm_credentials.h"  // See 'owm_credentials' tab and enter your OWM API key and set the Wifi SSID and PASSWORD
#include <ArduinoJson.h>       // https://github.com/bblanchon/ArduinoJson
#include <WiFi.h>              // Built-in
#include <_Time.h>              // Built-in
#include <SPI.h>               // Built-in
#define  ENABLE_GxEPD2_display 0
#include <GxEPD2_BW.h>
#include <GxEPD2_3C.h>
#include <U8g2_for_Adafruit_GFX.h>
#include "epaper_fonts.h"
#include "forecast_record.h"
#include "lang.h"
#include <WiFiMulti.h>
#include <HTTPClient.h>
#include "TimeLib.h"
#include <iostream>
#include <string>
#include "picosha2.h"

#define SCREEN_WIDTH  640.0    // Set for landscape mode, don't remove the decimal place!a
#define SCREEN_HEIGHT 384.0

WiFiMulti wifiMulti;

static const uint8_t room[] = {
   0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00,
   0x00, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x1f, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xfc, 0xff, 0x01, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0xc0,
   0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0xf0, 0xff,
   0xff, 0x07, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff,
   0xff, 0x3f, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0xfc, 0xff, 0xff,
   0x1f, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff,
   0x7f, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0xfe, 0xff, 0xff, 0x3f,
   0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff,
   0x01, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x80, 0xff, 0xff, 0xff, 0x7f, 0x00,
   0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x03,
   0x00, 0x00, 0xc0, 0xff, 0x03, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
   0xe0, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xfc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x07, 0x00,
   0x00, 0xc0, 0xff, 0x03, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0xf0,
   0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc,
   0x3f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00,
   0xc0, 0xff, 0x03, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0xf8, 0xff,
   0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f,
   0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xc0,
   0xff, 0x03, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0xf8, 0xff, 0xff,
   0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x3f, 0x00,
   0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xc0, 0xff,
   0x03, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0xfc, 0xff, 0xff, 0xff,
   0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00,
   0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x03,
   0xf8, 0xff, 0x0f, 0xfc, 0xff, 0x0f, 0x00, 0xfe, 0xff, 0x07, 0xfe, 0xff,
   0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x00,
   0xe0, 0xff, 0x7f, 0xe0, 0xff, 0x7f, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xfc,
   0xff, 0x03, 0xe0, 0xff, 0x0f, 0x00, 0xfe, 0xff, 0x00, 0xf0, 0xff, 0x07,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x00, 0xe0,
   0xff, 0x0f, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xfc, 0xff,
   0x00, 0xc0, 0xff, 0x1f, 0x00, 0xff, 0x7f, 0x00, 0xe0, 0xff, 0x0f, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x1f, 0x00, 0x00, 0x00, 0xf0, 0xff,
   0x07, 0x00, 0xfe, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xfe, 0x7f, 0x00,
   0x00, 0xff, 0x1f, 0x00, 0xff, 0x3f, 0x00, 0xc0, 0xff, 0x0f, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x03,
   0x00, 0xfc, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xfe, 0x3f, 0x00, 0x00,
   0xff, 0x3f, 0x00, 0xff, 0x1f, 0x00, 0x80, 0xff, 0x0f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xff, 0x0f, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x01, 0x00,
   0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xfe, 0x1f, 0x00, 0x00, 0xfe,
   0x3f, 0x80, 0xff, 0x0f, 0x00, 0x00, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xff, 0x0f, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xf0,
   0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0xff, 0x1f, 0x00, 0x00, 0xfc, 0x3f,
   0x80, 0xff, 0x0f, 0x00, 0x00, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x80, 0xff, 0x07, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xf0, 0xff,
   0x01, 0x00, 0xc0, 0xff, 0x03, 0xff, 0x0f, 0x00, 0x00, 0xfc, 0x3f, 0x80,
   0xff, 0x07, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
   0xff, 0x07, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0xe0, 0xff, 0x01,
   0x00, 0xc0, 0xff, 0x03, 0xff, 0x0f, 0x00, 0x00, 0xfc, 0x3f, 0x80, 0xff,
   0x07, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff,
   0x07, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0xe0, 0xff, 0x01, 0x00,
   0xc0, 0xff, 0x03, 0xff, 0x0f, 0x00, 0x00, 0xf8, 0x7f, 0x80, 0xff, 0x07,
   0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x07,
   0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0xe0, 0xff, 0x01, 0x00, 0xc0,
   0xff, 0x03, 0xff, 0x0f, 0x00, 0x00, 0xf8, 0x7f, 0x80, 0xff, 0x03, 0x00,
   0x00, 0xfc, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00,
   0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0xc0, 0xff,
   0x03, 0xff, 0x0f, 0x00, 0x00, 0xf8, 0x7f, 0x80, 0xff, 0x03, 0x00, 0x00,
   0xfc, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00,
   0x00, 0xf8, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x03,
   0xff, 0x0f, 0x00, 0x00, 0xf8, 0x7f, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0x00,
   0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xff,
   0x0f, 0x00, 0x00, 0xf8, 0x7f, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x03, 0x00, 0x00, 0x00, 0xf8,
   0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xff, 0x0f,
   0x00, 0x00, 0xf8, 0x3f, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x01, 0x00, 0x00, 0x00, 0xf8, 0x3f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xff, 0x0f, 0x00,
   0x00, 0xfc, 0x3f, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xe0, 0xff, 0x01, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xff, 0x0f, 0x00, 0x00,
   0xfc, 0x3f, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xe0, 0xff, 0x01, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xfe, 0x1f, 0x00, 0x00, 0xfe,
   0x3f, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xf0, 0xff, 0x01, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xfe, 0x1f, 0x00, 0x00, 0xfe, 0x3f,
   0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xf0, 0xff, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xc0, 0xff, 0x03, 0xfe, 0x07, 0x00, 0x00, 0xff, 0x1f, 0x80,
   0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
   0xff, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xc0, 0xff, 0x03, 0xfe, 0x03, 0x00, 0x80, 0xff, 0x1f, 0x80, 0xff,
   0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff,
   0x00, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xc0, 0xff, 0x03, 0xfc, 0x00, 0x00, 0x80, 0xff, 0x0f, 0x80, 0xff, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x00,
   0x00, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
   0xff, 0x03, 0x3c, 0x00, 0x00, 0xc0, 0xff, 0x0f, 0x80, 0xff, 0x03, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00,
   0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff,
   0x03, 0x18, 0x00, 0x00, 0xc0, 0xff, 0x07, 0x80, 0xff, 0x03, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00,
   0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03,
   0x00, 0x00, 0x00, 0xe0, 0xff, 0x07, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00,
   0xf8, 0x3f, 0xf8, 0xff, 0x01, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00,
   0x00, 0x00, 0xf0, 0xff, 0x03, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xf8,
   0x3f, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00,
   0x00, 0xf0, 0xff, 0x03, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff,
   0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0x00,
   0xf8, 0xff, 0x01, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff,
   0xff, 0x7f, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0x00, 0xfc,
   0xff, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff,
   0xff, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0x00, 0xfc, 0xff,
   0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xfe, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff,
   0x03, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x00,
   0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xfe, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07,
   0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x80,
   0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
   0x1f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00,
   0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x80, 0xff,
   0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x1f,
   0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00,
   0xc0, 0xff, 0x03, 0x00, 0x00, 0x80, 0xff, 0x1f, 0x00, 0x80, 0xff, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0x00,
   0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xc0,
   0xff, 0x03, 0x00, 0x00, 0x80, 0xff, 0x1f, 0x00, 0x80, 0xff, 0x03, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0x00, 0x00,
   0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0xc0, 0xff,
   0x03, 0x00, 0x00, 0xc0, 0xff, 0x0f, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0xf8, 0x7f, 0x00,
   0x00, 0xf8, 0xff, 0x7f, 0xe0, 0xff, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x03,
   0x00, 0x00, 0xe0, 0xff, 0x07, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0xf8, 0x7f, 0x00, 0x00,
   0xf8, 0xff, 0x0f, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00,
   0x00, 0xe0, 0xff, 0x07, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x07, 0xf8, 0x7f, 0x00, 0x00, 0xf8,
   0xff, 0x07, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00,
   0xf0, 0xff, 0x03, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x80, 0xff, 0x07, 0xf8, 0x7f, 0x00, 0x00, 0xf8, 0xff,
   0x03, 0x00, 0xfc, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0xf8,
   0xff, 0x01, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x80, 0xff, 0x07, 0xf8, 0x7f, 0x00, 0x00, 0xf8, 0xff, 0x01,
   0x00, 0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0xf8, 0xff,
   0x01, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x80, 0xff, 0x07, 0xf8, 0x7f, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
   0xf0, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0xfc, 0xff, 0x00,
   0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xc0, 0xff, 0x03, 0xf8, 0x7f, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xf0,
   0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00,
   0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
   0xff, 0x03, 0xf8, 0x7f, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0xe0, 0xff,
   0x01, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0x80,
   0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff,
   0x03, 0xf8, 0x7f, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0xe0, 0xff, 0x01,
   0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0x80, 0xff,
   0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x03,
   0xf8, 0x7f, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0xe0, 0xff, 0x01, 0x00,
   0xc0, 0xff, 0x03, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0x80, 0xff, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x01, 0xf8,
   0x7f, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0xc0,
   0xff, 0x03, 0x00, 0x80, 0xff, 0x1f, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x01, 0xf8, 0x7f,
   0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0xc0, 0xff,
   0x03, 0x00, 0xc0, 0xff, 0x0f, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x01, 0xf8, 0x7f, 0x00,
   0x00, 0xf8, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x03,
   0x00, 0xc0, 0xff, 0x0f, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x01, 0xf8, 0x7f, 0x00, 0x00,
   0xf8, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0x00,
   0xe0, 0xff, 0x07, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0xf8,
   0x3f, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0x00, 0xf0,
   0xff, 0x03, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xf0, 0xff, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0xf8, 0x3f,
   0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0x00, 0xf0, 0xff,
   0x03, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xf0, 0xff, 0x01, 0xf8, 0x7f, 0x00, 0x00, 0xf8, 0x3f, 0x00,
   0x00, 0xc0, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0x00, 0xf8, 0xff, 0x01,
   0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xf8, 0x3f, 0x00, 0x00,
   0xc0, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0x00, 0xfc, 0xff, 0x00, 0x00,
   0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xf8, 0x3f, 0x00, 0x00, 0xc0,
   0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0x00, 0xfc, 0xff, 0x00, 0x00, 0x00,
   0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xf8, 0x3f, 0x00, 0x00, 0xc0, 0xff,
   0x01, 0x00, 0xc0, 0xff, 0x03, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x80,
   0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x07, 0xf8, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x01,
   0x00, 0xc0, 0xff, 0x03, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x80, 0xff,
   0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x07, 0xf8, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00,
   0xc0, 0xff, 0x03, 0x00, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x07, 0xf8, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0xc0,
   0xff, 0x03, 0x80, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00,
   0x00, 0xfc, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x07, 0xf8, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0xc0, 0xff,
   0x03, 0x80, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00,
   0xfc, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x07, 0xf8, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x03,
   0xc0, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x80, 0xff, 0x07, 0x00, 0x00, 0xfe,
   0x1f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07,
   0xf8, 0x3f, 0x00, 0x00, 0xe0, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0xe0,
   0xff, 0x07, 0x00, 0x00, 0x00, 0x80, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x1f,
   0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xf8,
   0x7f, 0x00, 0x00, 0xe0, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0xe0, 0xff,
   0x07, 0x00, 0x00, 0x00, 0x80, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x1f, 0x00,
   0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xf8, 0x7f,
   0x00, 0x00, 0xe0, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0xf0, 0xff, 0x03,
   0x00, 0x00, 0x00, 0x80, 0xff, 0x0f, 0x00, 0x00, 0xff, 0x1f, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0xf8, 0x7f, 0x00,
   0x00, 0xe0, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0xf8, 0xff, 0x01, 0x00,
   0x00, 0x00, 0x80, 0xff, 0x0f, 0x00, 0x00, 0xff, 0x1f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
   0xf0, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x03, 0xf8, 0xff, 0x01, 0x00, 0x00,
   0x00, 0x00, 0xff, 0x1f, 0x00, 0x80, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0xf0, 0xff, 0x01, 0x00, 0xf8,
   0xff, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xff, 0x3f, 0x00, 0xc0, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0xf0, 0xff, 0x01, 0x00, 0xf8, 0xff,
   0x00, 0x00, 0xc0, 0xff, 0x03, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xff, 0x7f, 0x00, 0xe0, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xf8, 0x7f, 0x00, 0x00, 0xf0, 0xff, 0x03, 0x00, 0xfc, 0xff, 0x00,
   0x00, 0xc0, 0xff, 0x03, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
   0xff, 0x00, 0xf0, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xf8, 0x7f, 0x00, 0x00, 0xe0, 0xff, 0x0f, 0x00, 0xff, 0x7f, 0x00, 0x00,
   0xc0, 0xff, 0x03, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff,
   0x07, 0xfe, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8,
   0x7f, 0x00, 0x00, 0xe0, 0xff, 0x3f, 0xc0, 0xff, 0x7f, 0x00, 0x00, 0xc0,
   0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xfc, 0xff, 0xff,
   0xff, 0xff, 0x03, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f,
   0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0xc0, 0xff,
   0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xf8, 0xff, 0xff, 0xff,
   0xff, 0x03, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00,
   0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0xc0, 0xff, 0x03,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff,
   0x01, 0x00, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00,
   0x80, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x00,
   0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00,
   0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x7f, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00,
   0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0xfe,
   0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x7f, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0xf8,
   0x3f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0xfc, 0xff,
   0xff, 0xff, 0x03, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x7f, 0x00, 0x80, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xf8, 0x3f,
   0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff,
   0xff, 0x01, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x7f, 0x00, 0x00, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xf8, 0x3f, 0x00,
   0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff,
   0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,
   0x00, 0x00, 0xfc, 0xff, 0xff, 0x03, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00,
   0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x3f, 0x00,
   0x00, 0x00, 0xc0, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00,
   0x00, 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0xf0, 0x1f, 0x00, 0x00, 0x00,
   0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x00,
   0x00, 0xc0, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00,
   0xc0, 0xff, 0x3f, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00,
   0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x03, 0x00, 0x00, 0x00,
   0xc0, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00,
   0xfe, 0x07, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xf8,
   0x7f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xc0,
   0xff, 0x03 };

const char* ca = \
                 "-----BEGIN CERTIFICATE-----" \
                 "MIIFSDCCBDCgAwIBAgIQJbr1iZeprVOYhkPGAD8hkzANBgkqhkiG9w0BAQsFADCB\n" \
                 "kDELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\n" \
                 "A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxNjA0BgNV\n" \
                 "BAMTLUNPTU9ETyBSU0EgRG9tYWluIFZhbGlkYXRpb24gU2VjdXJlIFNlcnZlciBD\n" \
                 "QTAeFw0xODAxMzEwMDAwMDBaFw0yMTAxMzAyMzU5NTlaMFgxITAfBgNVBAsTGERv\n" \
                 "bWFpbiBDb250cm9sIFZhbGlkYXRlZDEdMBsGA1UECxMUUG9zaXRpdmVTU0wgV2ls\n" \
                 "ZGNhcmQxFDASBgNVBAMMCyouY29uc29sLmRlMIIBIjANBgkqhkiG9w0BAQEFAAOC\n" \
                 "AQ8AMIIBCgKCAQEAsgAxUF/9OZcnXncmf58EbSZ+g2GoTCDcu+bzVltil2mbs5l0\n" \
                 "aPcRbEGo9GBj24OgKJrSTECtgChFwEShAVMc8FiYSFkevbRDUWR0fWv6dA9U82bj\n" \
                 "0itBbty4F1F9Zz/slA2MhHlugzeoyrn1Ci671F9bbYASBgsMOwzlilrr3eBQ0sb8\n" \
                 "HZP5prWcDmmso/BEuKYgfxg+ec1vjisvRHQRbAFcUW6zO0OzGmIZSpv0UoPJOO35\n" \
                 "dgiqSPPOZhvd/WMl8j/3ZGnMTDD6DcV4bdNPA8cKaNo/SpT6s4opl92rqyaq6nxu\n" \
                 "BrkKlI1tRLcxAA/qeXhPxiVdiKwJcNeu+2S4wQIDAQABo4IB0zCCAc8wHwYDVR0j\n" \
                 "BBgwFoAUkK9qOpRaC9iQ6hJWc99DtDoo2ucwHQYDVR0OBBYEFLWuoStR8foYmDpm\n" \
                 "+oLhFIbeLbnkMA4GA1UdDwEB/wQEAwIFoDAMBgNVHRMBAf8EAjAAMB0GA1UdJQQW\n" \
                 "MBQGCCsGAQUFBwMBBggrBgEFBQcDAjBPBgNVHSAESDBGMDoGCysGAQQBsjEBAgIH\n" \
                 "MCswKQYIKwYBBQUHAgEWHWh0dHBzOi8vc2VjdXJlLmNvbW9kby5jb20vQ1BTMAgG\n" \
                 "BmeBDAECATBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vY3JsLmNvbW9kb2NhLmNv\n" \
                 "bS9DT01PRE9SU0FEb21haW5WYWxpZGF0aW9uU2VjdXJlU2VydmVyQ0EuY3JsMIGF\n" \
                 "BggrBgEFBQcBAQR5MHcwTwYIKwYBBQUHMAKGQ2h0dHA6Ly9jcnQuY29tb2RvY2Eu\n" \
                 "Y29tL0NPTU9ET1JTQURvbWFpblZhbGlkYXRpb25TZWN1cmVTZXJ2ZXJDQS5jcnQw\n" \
                 "JAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmNvbW9kb2NhLmNvbTAhBgNVHREEGjAY\n" \
                 "ggsqLmNvbnNvbC5kZYIJY29uc29sLmRlMA0GCSqGSIb3DQEBCwUAA4IBAQAS0oTT\n" \
                 "FZBzEEruISKQAMC/XHe+sjrKaw8vwRkeHJnr2ptY9Q5KPAqMDVLCojTFz3nwEfz0\n" \
                 "gDiuNn166TrpZJljy+y4pKrt7jHn8BrS1V25T12hFYOnw3auZ3RJ3XN80ASnlIx+\n" \
                 "DIl8ue1j5imMY8jK1Li20bbzug+JzOJb5n4BoqTu9nY5tB4r+WRxGQy2E9rG/huE\n" \
                 "4oiXIn14I/Ya+LNeaR8zoOUOlNyOzisQczQZ/Cn9dRBxOOI1mKN751GkgNzb7gw9\n" \
                 "ykc/nxKmW7W0tOQZT6wFawTHrPxa2vleKBbyLxlwso4YRbgkhFu59fy+qt2LRO+m\n" \
                 "IMCHQy+uhMT49bus\n" \
                 "-----END CERTIFICATE-----";

enum alignment {LEFT, RIGHT, CENTER};

static const uint8_t EPD_BUSY = 4;  // to EPD BUSY
static const uint8_t EPD_CS   = 5;  // to EPD CS
static const uint8_t EPD_RST  = 16; // to EPD RST
static const uint8_t EPD_DC   = 17; // to EPD DC
static const uint8_t EPD_SCK  = 18; // to EPD CLK
static const uint8_t EPD_MISO = 19; // Master-In Slave-Out not used, as no data from display
static const uint8_t EPD_MOSI = 23; // to EPD DIN
GxEPD2_3C<GxEPD2_750c, GxEPD2_750c::HEIGHT> display(GxEPD2_750c(/*CS=D8*/ EPD_CS, /*DC=D3*/ EPD_DC, /*RST=D4*/ EPD_RST, /*BUSY=D2*/ EPD_BUSY));

U8G2_FOR_ADAFRUIT_GFX u8g2Fonts;  // Select u8g2 font from here: https://github.com/olikraus/u8g2/wiki/fntlistall

// Using fonts:
// u8g2_font_helvB08_tf
// u8g2_font_helvB10_tf
// u8g2_font_helvB12_tf
// u8g2_font_helvB14_tf
// u8g2_font_helvB18_tf
// u8g2_font_helvB24_tf

//################  VERSION  ##########################
String version = "12.1";       // Version of this program
//################ VARIABLES ###########################

boolean LargeIcon = true, SmallIcon = false;
#define Large  11           // For icon drawing, needs to be odd number for best effect
#define Small  5            // For icon drawing, needs to be odd number for best effect
String  text, time_str, date_str, unixTime, jsonRessource, jsonComment, jsonUser, jsonEntryId, jsonStartTimeOut, jsonEndTimeOut, payload, network_name, entries_link, ldrString, sha256_payload; // strings to hold time and received weather data
int     wifi_signal, CurrentHour = 0, CurrentMin = 0, CurrentSec = 0, CurrentYear = 0, CurrentMonth = 0, CurrentMDay = 0, CurrentDST = -1,t_of_day, jsonStartTime, jsonEndTime, current_entry_id;
long    StartTime = 0, SleepTimer = 0;
struct tm t;
struct tm timeinfo;
DynamicJsonDocument doc(30000);

static String ressource = "br.2c.46";
static String roomname = "2C.46";

//################ PROGRAM VARIABLES and OBJECTS ################

#define max_readings 24
#define autoscale_on  true
#define autoscale_off false
#define barchart_on   true
#define barchart_off  false

long SleepDuration = 3; // Sleep time in minutes, aligned to the nearest minute boundary, so if 30 will always update at 00 or 30 past the hour
int  WakeupTime    = 7;  // Don't wakeup until after 07:00 to save battery power
int  SleepTime     = 21; // Sleep after (23+1) 00:00 to save battery power

//#############################################################################################################################################
//
// FUNCTIONS BEGIN BELOW ME
//
//#############################################################################################################################################

/**
 * 
 * @param  {String} link : The url the http client will be connecting to.
 * @param  {char*} (optional) cert  : The certificate the client will be using.
 * @return {String}      : Response of the http client
 */
String getHttpString(String link, const char* cert) {
  //Serial.println(link);
  HTTPClient http;
  if (cert = NULL) http.begin(link);
  else http.begin(link, cert);
  http.GET();
  return http.getString();
}

/**
 * 
 * @param  {String} link : The url the http client will be connecting to.
 * @param  {char*} (optional) cert  : The certificate the client will be using.
 * @return {String}      : Response of the http client
 */
String getHttpString(String link) {
  return getHttpString(link, NULL);
}

/**
 * 
 * @param  {String} input : The string which will be hashed.
 * @return {String}       : SHA-256 Hash as String
 */
String hashStringToSHA256(String input) {
  //Serial.println(String(picosha2::hash256_hex_string(input).c_str()));
  if (input.equals("") == false) return String(picosha2::hash256_hex_string(input).c_str());
  else return "du haschd n fehla gmachd ey";
}
/**
 * TODO: Find out what this does
 */
void writeLog() {
  time_t t_of_day;

  t.tm_year = CurrentYear;
  t.tm_mon = CurrentMonth;           // Month, 0 - jan
  t.tm_mday = CurrentMDay;          // Day of the month
  t.tm_hour = CurrentHour;
  t.tm_min = CurrentMin;
  t.tm_sec = CurrentSec;
  t.tm_isdst = CurrentDST;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
  t_of_day = mktime(&t);

  HTTPClient http;
  ldrString.replace(" ", "%");
  String link = "https://intradev.consol.de/scripts/writelog.php?res=" + ressource + "&ip=" + WiFi.localIP().toString() + "&net=" + ssid + "&time=" + (CurrentYear+1900)+"-"+CurrentMonth+"-"+CurrentMDay+"%"+CurrentHour+":"+CurrentMin+":"+CurrentSec + "&unix=" + t_of_day + "&link=" + sha256_payload + "&ldr=" + ldrString + "&at=" + int((millis() - StartTime) / 1000.0) + "&dst=" +  SleepTimer + "&eid=" + current_entry_id + "&mac=" + WiFi.macAddress() + "&curhr=" + CurrentHour;
  //Serial.println(link);
  http.begin(link, ca);
  int httpCode = http.GET();
  if (httpCode > 0) {
    // HTTP header has been send and Server response header has been handled
    //Serial.printf("[HTTP] GET... code: %d\n", httpCode);

    // file found at server
    if (httpCode == HTTP_CODE_OK) {
      payload = http.getString().substring(22);
    }
  }
}

String getValueOfLastLog(String value) {
  return getHttpString("https://intradev.consol.de/scripts/writelog.php?res="+ressource+"&sel="+value);
}

/**
 * Draws text with a white background (Use drawStringTransparent() for no background!)
 * @param  {int} x           : X-Coordinate
 * @param  {int} y           : Y-Coordinate
 * @param  {String} text     : Text to render
 * @param  {alignment} align : Alignment to coordinates (As String; Valid options: LEFT, RIGHT, CENTER)
 */
void drawString(int x, int y, String text, alignment align) {
  int16_t  x1, y1; //the bounds of x,y and w and h of the variable 'text' in pixels.
  uint16_t w, h;
  display.setTextWrap(false);
  display.getTextBounds(text, x, y, &x1, &y1, &w, &h);
  if (align == RIGHT)  x = x - w;
  if (align == CENTER) x = x - w / 2;
  u8g2Fonts.setCursor(x, y + h);
  u8g2Fonts.print(text);
}

/**
 * Draws text with a transparent background
 * @param  {int} x           : X-Coordinate
 * @param  {int} y           : Y-Coordinate
 * @param  {String} text     : Text to render
 * @param  {alignment} align : Alignment to coordinates (As String; Valid options: LEFT, RIGHT, CENTER)
 */
void drawStringTransparent(int x, int y, String text, alignment align) {
  int16_t  x1, y1; //the bounds of x,y and w and h of the variable 'text' in pixels.
  uint16_t w, h;
  display.setTextWrap(false);
  display.getTextBounds(text, x, y, &x1, &y1, &w, &h);
  if (align == RIGHT)  x = x - w;
  if (align == CENTER) x = x - w / 2;
  u8g2Fonts.setCursor(x, y + h);
  u8g2Fonts.setFontMode(1);
  u8g2Fonts.print(text);
}

// Berechnet Zeit des bevorstehenden deep Sleeps der ebenfalls in der gleichen Funktion aufgerufen wird
void beginSleep() {
  display.powerOff();
  SleepTimer = (SleepDuration * 60 - ((CurrentMin % SleepDuration) * 60 + CurrentSec)); //Some ESP32 are too fast to maintain accurate time
  esp_sleep_enable_timer_wakeup(SleepTimer * 1000000LL);
#ifdef BUILTIN_LED
  pinMode(BUILTIN_LED, INPUT); // If it's On, turn it off and some boards use GPIO-5 for SPI-SS, which remains low after screen use
  digitalWrite(BUILTIN_LED, HIGH);
#endif
  //Serial.println("Entering " + String(SleepTimer) + "-secs of sleep time");
  //Serial.println("Awake for : " + String((millis() - StartTime) / 1000.0, 3) + "-secs");
  //Serial.println("Starting deep-sleep period for " + (String)SleepTimer + " seconds...");
  esp_deep_sleep_start();      // Sleep for e.g. 30 minutes
}

/**
 * Draws the current time along with some UI elements (Use with drawUI())
 * @param  {int} x        : X-Coordinate
 * @param  {int} y        : Y-Coordinate
 * @param  {int} ySpacing  : Pixels between the hours
 * @param  {int} cur_hour : Hour of the current time
 * @param  {int} count    : Amount of hours to draw
 */
void drawTimeHeader(int x, int y, int ySpacing, int cur_hour, int count) {
  u8g2Fonts.setFont(u8g2_font_helvB12_tf);
  for (int i = 0; i < count; i++) {
    drawString(x, y + (i*ySpacing), String(cur_hour+i), RIGHT);
  }
}
/**
 * Converts unix timestamps of an event to a human readable text. (Used with drawHeadingSection())
 * @param  {int} start_time : Unix timestamp of the begin
 * @param  {int} end_time   : Unix timestamp of the end
 * @return {String}         : Human readable time. Example: '00:00 bis 12:00'
 */
String eventDurationString(int start_time, int end_time) {
  char tmp1[10];
  char tmp2[10];
  String out = "";
  time_t start_time_t = start_time; 
  time_t end_time_t = end_time; 

  strftime(tmp1, sizeof(tmp1), "%H:%M", localtime(&start_time_t));
  strftime(tmp2, sizeof(tmp2), "%H:%M", localtime(&end_time_t));
  out = String(tmp1) + " bis " + String(tmp2);
  return out;
}
/**
 * Converts a ConSol-Intranet username to his/her full name
 * @param  {String} user : 
 * @return {String}      : 
 */
String userToFullName(String user) {
  HTTPClient http;
  String payload = "";
  String link = "https://intradev.consol.de/scripts/nameconvert.php?n=" + String(user);
  //Serial.println(link);
  http.begin(link, ca);
  int httpCode = http.GET();
  if (httpCode > 0) {
    // HTTP header has been send and Server response header has been handled
    //Serial.printf("[HTTP] GET... code: %d\n", httpCode);

    // file found at server
    if (httpCode == HTTP_CODE_OK) {
      payload = http.getString().substring(22);
    }
  }
  //payload.replace("ß","ss");
  //Serial.println(payload);
  return String(payload);
}

// Zeichnet Header (Raumname in Großschrift, Aktuelles Ereignis, Ereignisersteller, etc..)
/**
 * Checks if a room's events changed by comparing it to the last known. Uses database to get last hash and compares those.
 * @param  {String} room_ressource : Name of room in database
 * @return {boolean}               : True if events of room have changed
 */
boolean hasHeadingChanged(String room_ressource) {
  time_t t_of_day;

  t.tm_year = CurrentYear;
  t.tm_mon = CurrentMonth;           // Month, 0 - jan
  t.tm_mday = CurrentMDay;          // Day of the month
  t.tm_hour = CurrentHour;
  t.tm_min = CurrentMin+1;
  t.tm_sec = CurrentSec;
  t.tm_isdst = CurrentDST;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
  t_of_day = mktime(&t);
  /*u8g2Fonts.setFont(u8g2_font_helvB08_tf);
  drawString(SCREEN_WIDTH / 2, 0, "ConSol", CENTER);
  drawString(SCREEN_WIDTH, 0, date_str, RIGHT);
  drawString(4, 0, time_str, LEFT);
  display.drawLine(0, 12, SCREEN_WIDTH, 12, GxEPD_BLACK);*/

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String link = "https://intradev.consol.de/scripts/currententry.php?t=" + String(t_of_day) + "&r=" + room_ressource;
    //Serial.println(link);
    http.begin(link, ca);
    int httpCode = http.GET();
    if (httpCode > 0) {
      // HTTP header has been send and Server response header has been handled
      //Serial.printf("[HTTP] GET... code: %d\n", httpCode);

      // file found at server
      if (httpCode == HTTP_CODE_OK) {
        String payload = http.getString().substring(22);
        //Serial.println(payload);
        deserializeJson(doc, payload);
        payload = "";

        jsonEntryId = "";
        jsonUser = "";
        jsonComment = "";
        jsonStartTimeOut = "";
        jsonEndTimeOut = "";

        serializeJson(doc["entry_id"], jsonEntryId);
        serializeJson(doc["user"], jsonUser);
        serializeJson(doc["comment"], jsonComment);
        serializeJson(doc["start_time"], jsonStartTimeOut);
        serializeJson(doc["end_time"], jsonEndTimeOut);

        jsonComment = jsonComment.substring(1,jsonComment.length()-1);
        jsonUser = jsonUser.substring(1,jsonUser.length()-1);
        jsonStartTime = jsonStartTimeOut.toInt();
        jsonEndTime = jsonEndTimeOut.toInt();
        jsonUser.replace("\"", "");


        if (jsonComment.equals("ul")) {
          jsonComment = "Raum ist frei";
        } else {
        }
      }
    } else {
      jsonComment = "";
    }
    
  } else {
    jsonComment = "";
  }
  boolean changed = true;
  String tempEntryId = getValueOfLastLog("current_entry_id");
  if (jsonEntryId.equals("null")) jsonEntryId = "0";
  //Serial.println("HERE COMES JOHNNY!\n"+jsonEntryId+"\n"+tempEntryId);
  text = String(jsonEntryId) + " // " + String(tempEntryId);
  if (jsonEntryId.equals(tempEntryId)) changed = false;
  return changed;
}
/**
 * Draws heading section (Name of current room, current event and its details)
 * @param  {String} roomname       : 
 * @param  {String} room_ressource : 
 */
void drawHeadingSection(String roomname, String room_ressource) {
  boolean raumFrei = true;
  time_t t_of_day;

  t.tm_year = CurrentYear;
  t.tm_mon = CurrentMonth;           // Month, 0 - jan
  t.tm_mday = CurrentMDay;          // Day of the month
  t.tm_hour = CurrentHour;
  t.tm_min = CurrentMin+3;
  t.tm_sec = CurrentSec;
  t.tm_isdst = CurrentDST;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
  t_of_day = mktime(&t);
  /*u8g2Fonts.setFont(u8g2_font_helvB08_tf);
  drawString(SCREEN_WIDTH / 2, 0, "ConSol", CENTER);
  drawString(SCREEN_WIDTH, 0, date_str, RIGHT);
  drawString(4, 0, time_str, LEFT);
  display.drawLine(0, 12, SCREEN_WIDTH, 12, GxEPD_BLACK);*/

  display.fillRect(0,0,SCREEN_WIDTH,127,GxEPD_WHITE);
  display.drawXBitmap(35,23,room,274,94,GxEPD_BLACK);

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String link = "https://intradev.consol.de/scripts/currententry.php?t=" + String(t_of_day) + "&r=" + room_ressource;
    //Serial.println(link);
    http.begin(link, ca);
    int httpCode = http.GET();
    if (httpCode > 0) {
      // HTTP header has been send and Server response header has been handled
      //Serial.printf("[HTTP] GET... code: %d\n", httpCode);

      // file found at server
      if (httpCode == HTTP_CODE_OK) {
        String payload = http.getString().substring(22);
        //Serial.println(payload);
        deserializeJson(doc, payload);
        payload = "";

        jsonUser = "";
        jsonComment = "";
        jsonStartTimeOut = "";
        jsonEndTimeOut = "";
        jsonEntryId = "";

        current_entry_id = doc["entry_id"];
        serializeJson(doc["user"], jsonUser);
        serializeJson(doc["comment"], jsonComment);
        serializeJson(doc["start_time"], jsonStartTimeOut);
        serializeJson(doc["end_time"], jsonEndTimeOut);

        jsonComment = jsonComment.substring(1,jsonComment.length()-1);
        jsonUser = jsonUser.substring(1,jsonUser.length()-1);
        jsonStartTime = jsonStartTimeOut.toInt();
        jsonEndTime = jsonEndTimeOut.toInt();
        jsonUser.replace("\"", "");


        if (jsonComment == "ul") {
          jsonComment = "Raum ist frei";
        } else {
          raumFrei = false;
        }
      }
    } else {
      jsonComment = "!LOADING FAIL!";
    }
    
  } else {
    jsonComment = "!NO WIFI!";
  }
  if (jsonComment != NULL) {
    if (!raumFrei) {
      u8g2Fonts.setFont(u8g2_font_logisoso20_tf);
      drawString(314, 71, jsonComment, LEFT);
    }
    else {
      u8g2Fonts.setFont(u8g2_font_logisoso34_tf);
      drawString(314, 80, jsonComment, LEFT);
    }
    
    if (!raumFrei) {
      u8g2Fonts.setFont(u8g2_font_logisoso16_tf);
      drawString(314, 45, userToFullName(jsonUser), LEFT);
      drawString(314, 93, eventDurationString(jsonStartTime,jsonEndTime), LEFT);
    }
  }
}
// Bezieht die Kalenderdaten aus dem IntraNet via json und einem Intranet-Script (Indirekte Abhängigkeit von drawEvent())
boolean getEventJsonAsString() {
  time_t t_of_day;

  t.tm_year = CurrentYear;
  t.tm_mon = CurrentMonth;           // Month, 0 - jan
  t.tm_mday = CurrentMDay;          // Day of the month
  t.tm_hour = CurrentHour;
  t.tm_min = 0;
  t.tm_sec = 0;
  t.tm_isdst = CurrentDST;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
  t_of_day = mktime(&t);

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String link = "https://intradev.consol.de/scripts/entries.php?l=1000&s=" + String(t_of_day-43200) + "&e=" + String(t_of_day+129600);
    entries_link = link;
    entries_link.replace("&","%26");
    //Serial.println(link);
    ////Serial.println(ESP.getFreeHeap());
    http.begin(link, ca);
    int httpCode = http.GET();
    if (httpCode > 0) {
      // HTTP header has been send and Server response header has been handled
      //Serial.printf("[HTTP] GET... code: %d\n", httpCode);
      // file found at server
      if (httpCode == HTTP_CODE_OK) {
        payload = http.getString().substring(22);
        sha256_payload = hashStringToSHA256(payload);
        String other = getHttpString(String("https://intradev.consol.de/scripts/writelog.php?res="+ressource+"&sel=entries_link"),ca);
        //Serial.println("let the battle begin");
        //Serial.println(other);
        //Serial.println(sha256_payload);
        if (!sha256_payload.equals(other)) {
          //Serial.println("OK, returning true!");
          return true;
        } else {
          //Serial.println("Is still the same, returning false!");
          return false;
        }
      }
      else {
        //Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
        return false;
      }
    } else {
      //Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
      return false;
    }
  } else {
    //Serial.println("No WiFi connection is established!");
    return false;
  }
}
// Konvertiert Json in Kalendareinträge auf dem Display via String (Hard-Coded auf den String payload)
/**
 * Gets and draws events of room. (Might take a while; Uses much RAM)
 * @param  {int} x                 : X-Coordinate
 * @param  {int} sx                : Size on X-Axis
 * @param  {String} room_ressource : Name of room in database
 */
void drawEvent(int x, int sx, String room_ressource) {
  //Serial.println("Drawing events..");
  time_t t_of_day;

  t.tm_year = CurrentYear;
  t.tm_mon = CurrentMonth;           // Month, 0 - jan
  t.tm_mday = CurrentMDay;          // Day of the month
  t.tm_hour = CurrentHour;
  t.tm_min = 0;
  t.tm_sec = 0;
  t.tm_isdst = CurrentDST;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
  t_of_day = mktime(&t);

  deserializeJson(doc, payload);
  ////Serial.println("-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-");
  ////Serial.print(ESP.getFreeHeap());
  int jsonIndex = 0;
  for (doc.size();jsonIndex <= doc.size();jsonIndex++) {
    jsonStartTimeOut = "";
    jsonEndTimeOut = "";
    jsonRessource = "";
    jsonEntryId = "";
    jsonComment = "";
    jsonUser = "";
    
    serializeJson(doc[jsonIndex]["start_time"], jsonStartTimeOut);
    serializeJson(doc[jsonIndex]["end_time"], jsonEndTimeOut);
    serializeJson(doc[jsonIndex]["ressource"], jsonRessource);
    serializeJson(doc[jsonIndex]["comment"], jsonComment);
    serializeJson(doc[jsonIndex]["user"], jsonUser);
    serializeJson(doc[jsonIndex]["entry_id"], jsonEntryId);

    /*serializeJson(doc[jsonIndex]["entry_id"], Serial);
    serializeJson(doc[jsonIndex]["user"], Serial);
    serializeJson(doc[jsonIndex]["comment"], Serial);
    serializeJson(doc[jsonIndex]["ressource"], Serial);*/

    jsonRessource.replace("\"", "");
    jsonComment.replace("\"", "");
    jsonUser.replace("\"", "");
    jsonStartTime = jsonStartTimeOut.toInt();
    jsonEndTime = jsonEndTimeOut.toInt();
    ////Serial.print(jsonStartTimeOut);
    ////Serial.print("|");
    ////Serial.print(jsonEndTimeOut);
    ////Serial.print("|");
    ////Serial.print(ESP.getFreeHeap());
    

    if (jsonRessource.equals(room_ressource)) {
      String jsonCommentSecondLine = "";
      float startFloat = (jsonStartTime - t_of_day) / 3600.0 * 38.0 + 56 +46;
      float endFloat = (jsonEndTime - t_of_day) / 3600.0 * 38.0 - 18 +46; // -18 +46 sind offsets die aus unerklärlichen gründen existieren
      //Serial.print("yes ");
      //Serial.println("\n\n" + jsonComment + "\n" + (String)(startFloat+46) + "\n" + (String)(startFloat-endFloat+75) + "\n" + (String)(jsonStartTime) + "\n" + (String)(jsonEndTime) + "\n" + (String)(t_of_day) + "\n\n");
      display.fillRoundRect(x+2, startFloat+48, sx-4, endFloat - startFloat + 75, 5, GxEPD_YELLOW);
      display.drawRoundRect(x+2, startFloat+48, sx-4, endFloat - startFloat + 75, 5, GxEPD_BLACK);
      boolean tooShortForSecondLine = false;
      boolean tooShortForText = false;
      boolean shorterThanYSpacing = false;
      if (endFloat - startFloat + 75 < 12) tooShortForText= true;
      else if (endFloat - startFloat + 75 < 24) {
        tooShortForSecondLine = true;
        shorterThanYSpacing = true;
        if (jsonComment.length()  >= 19) {
          jsonComment = jsonComment.substring(0,15);
          jsonComment.concat("...");
        }
      }
      if (jsonComment.length() >= 19 && !tooShortForText) {
        if (tooShortForSecondLine) {
          jsonComment = jsonComment.substring(0,15);
          jsonComment.trim();
          jsonComment.concat("...");
        } else {
          jsonCommentSecondLine = jsonComment.substring(18); // !INDEX START AT 0 WHILE STRING.LENGTH STARTS AT 1!
          jsonComment = jsonComment.substring(0,18);
          jsonComment.trim();
          jsonCommentSecondLine.trim();
          if (jsonCommentSecondLine.length() >= 19) {
            jsonCommentSecondLine = jsonCommentSecondLine.substring(0,15);
            jsonCommentSecondLine.trim();
            jsonCommentSecondLine.concat("...");
          }
        }
      }
      if (tooShortForText) continue;
      else if (tooShortForSecondLine) {
        u8g2Fonts.setFont(u8g2_font_helvB08_tf);
        drawStringTransparent(x+5,startFloat+42+((endFloat - startFloat + 75)/2),userToFullName(jsonUser),LEFT);
      }
      else if (jsonStartTime < t_of_day && jsonEndTime > t_of_day+3600) {
        u8g2Fonts.setFont(u8g2_font_courB08_tr);
        drawStringTransparent(x+5,150+1,"^^^^^^^^^^^^^^^^^^",LEFT),
        u8g2Fonts.setFont(u8g2_font_helvB08_tf);
        drawStringTransparent(x+5,150+7,userToFullName(jsonUser),LEFT);
        u8g2Fonts.setFont(u8g2_font_profont12_tf);
        drawStringTransparent(x+5,150+5+10,jsonComment,LEFT);
        drawStringTransparent(x+5,150+5+20,jsonCommentSecondLine,LEFT);
      } else if (shorterThanYSpacing) {
        u8g2Fonts.setFont(u8g2_font_profont12_tf);
        drawStringTransparent(x+5,startFloat+42+((endFloat - startFloat + 75)/2),jsonComment,LEFT);
      } else {
        u8g2Fonts.setFont(u8g2_font_helvB08_tf);
        drawStringTransparent(x+5,startFloat+50+4,userToFullName(jsonUser),LEFT);
        u8g2Fonts.setFont(u8g2_font_profont12_tf);
        drawStringTransparent(x+5,startFloat+50+10+4,jsonComment,LEFT);
        drawStringTransparent(x+5,startFloat+50+20+4,jsonCommentSecondLine,LEFT);
      } 
    }
  }
}

/**
 * Draws the lines seperating the hours in a drawRoom() box.
 * @param  {int} x           : X-Coordinate
 * @param  {int} y           : Y-Coordinate
 * @param  {int} sx          : Size on X-Axis
 * @param  {int} ySpacing    : Spacing between the lines along the Y-Axis
 * @param  {int} lineCount   : Amount of lines to draw
 * @param  {int} leftOrRight : 1, 2 or 3 TODO: Find out what this does ^^ And replace with enum
 */
void drawUI(int x, int y, int sx, int ySpacing, int lineCount, int leftOrRight) {
  for (int i = 0; i < lineCount; i++) {
    display.drawLine(x + 1, y + (i*ySpacing),x + sx - 2, y + (i*ySpacing), GxEPD_BLACK);

    if (leftOrRight < 1) leftOrRight = 1;
    else if (leftOrRight > 3) leftOrRight = 3;
    if (leftOrRight == 1 || leftOrRight == 3) {
      display.drawLine(x-1, y + (i*ySpacing), x-4, y+(i*ySpacing),GxEPD_BLACK);
      display.drawLine(x-1, y+1 + (i*ySpacing), x-6, y+1 + (i*ySpacing),GxEPD_BLACK);
      display.drawLine(x-1, y-1 + (i*ySpacing), x-6, y-1 + (i*ySpacing),GxEPD_BLACK);
    }

    if (leftOrRight == 2 || leftOrRight == 3) {
      display.drawLine(x+sx, y + (i*ySpacing), x+sx+4-1, y+(i*ySpacing),GxEPD_BLACK);
      display.drawLine(x+sx, y+1 + (i*ySpacing), x+sx+6-1, y+1 + (i*ySpacing),GxEPD_BLACK);
      display.drawLine(x+sx, y-1 + (i*ySpacing), x+sx+6-1, y-1 + (i*ySpacing),GxEPD_BLACK);
    }
  }
  //display.drawLine(x + 19, y - 2, x + 19, y + 5, GxEPD_BLACK);
}

/**
 * Draws a box for a room, automatically filled with drawUI() and drawEvent() elements!
 * @param  {int} x                 : X-Coordinate
 * @param  {int} y                 : Y-Coordinate
 * @param  {int} sx                : Size on X-Axis
 * @param  {int} sy                : Size on Y-Axis
 * @param  {int} ySpacing          : Spacing between the lines along the Y-Axis
 * @param  {int} lineCount         : Amount of lines to draw
 * @param  {int} leftOrRight       : 1, 2 or 3 TODO: Find out what this does ^^ And replace with enum
 * @param  {String} room           : Name of room to display on screen
 * @param  {String} room_ressource : Name of room in database
 */
void drawRoom(int x, int y, int sx, int sy, int ySpacing, int lineCount, int leftOrRight, String room, String room_ressource) {
  display.fillRect(x, y+23, sx, sy-23, GxEPD_WHITE);
  drawUI(x,y-15,sx,ySpacing,lineCount,leftOrRight);
  drawEvent(x,sx,room_ressource);
  display.fillRect(x, y, sx-2, 23, GxEPD_WHITE);
  display.drawRoundRect(x,y,sx-1,10,5,GxEPD_BLACK);
  display.fillRect(x+1,y+4,sx-2,10,GxEPD_WHITE);
  display.drawLine(x,y+5,x,y+23,GxEPD_BLACK);
  display.drawLine(x+sx-1,y+5,x+sx-1,y+23,GxEPD_BLACK);
  display.drawRect(x, y+23, sx, sy, GxEPD_BLACK);
  u8g2Fonts.setFont(u8g2_font_logisoso18_tf);
  drawStringTransparent(x + (sx/2) + 4, y + 13, room, RIGHT);
}

/**
 * Draws a box similar to drawRoom() but with colored elements to highlight this room.
 * @param  {int} x                 : X-Coordinate
 * @param  {int} y                 : Y-Coordinate
 * @param  {int} sx                : Size on X-Axis
 * @param  {int} sy                : Size on Y-Axis
 * @param  {int} ySpacing          : Spacing between the lines along the Y-Axis
 * @param  {int} lineCount         : Amount of lines to draw
 * @param  {int} leftOrRight       : 1, 2 or 3 TODO: Find out what this does ^^ And replace with enum
 * @param  {String} room           : Name of room to display on screen
 * @param  {String} room_ressource : Name of room in database
 */
void drawCurrentRoom(int x, int y, int sx, int sy, int ySpacing, int lineCount, int leftOrRight, String room, String room_ressource) {
  display.fillRect(x, y+23, sx, sy-23, GxEPD_WHITE);
  display.drawRect(x+1,y+24,sx-2,sy,GxEPD_YELLOW);
  display.drawRect(x+2,y+25,sx-4,sy-2,GxEPD_YELLOW);
  display.drawRect(x+3,y+26,sx-6,sy-4,GxEPD_YELLOW);
  drawUI(x,y-15,sx,ySpacing,lineCount,leftOrRight);
  drawEvent(x,sx,room_ressource);
  display.fillRect(x, y, sx-2, 23, GxEPD_WHITE);
  display.fillRoundRect(x,y,sx,10,5,GxEPD_YELLOW);
  display.drawRoundRect(x,y,sx,10,5,GxEPD_BLACK);
  display.fillRect(x, y+5, sx, 18, GxEPD_YELLOW);
  display.drawLine(x,y+5,x,y+23,GxEPD_BLACK);
  display.drawLine(x+sx-1,y+5,x+sx-1,y+23,GxEPD_BLACK);
  display.drawRect(x, y+23, sx, sy, GxEPD_BLACK);
  u8g2Fonts.setFont(u8g2_font_logisoso18_tf);
  drawStringTransparent(x + (sx/2) + 4, y + 13, room, RIGHT);
}
/**
 * Draws the ConSol logo (Unused; Made for better understanding of API).
 * @param  {int} x : X-Coordinate
 * @param  {int} y : Y-Coordinate
 */
void drawConsolLogo(int x, int y) {
  display.fillCircle(x, y, 10, GxEPD_BLACK);
  display.fillCircle(x, y, 7, GxEPD_WHITE);
  display.fillTriangle(x, y, x + 10, y + 10, x + 10, y - 10, GxEPD_WHITE);
  display.fillCircle(x, y, 4, GxEPD_YELLOW);
}
/**
 * Draws the bottom message with a border. Text is pulled from database.
 * @param  {int} x  : X-Coordinate
 * @param  {int} y  : Y-Coordinate
 * @param  {int} sx : Size on X-Axis
 * @param  {int} sy : Size on Y-Axis
 */
void drawBottomMessage(int x, int y, int sx, int sy, String text) {
  HTTPClient http;
  String payload = "";
  String link = "https://intradev.consol.de/scripts/motd.php";
  http.begin(link, ca);
  int httpCode = http.GET();
  if (httpCode > 0) {
    // HTTP header has been send and Server response header has been handled
    //Serial.printf("[HTTP] GET... code: %d\n", httpCode);

    if (httpCode == HTTP_CODE_OK) {
      payload = http.getString().substring(22);
    } else {
      payload = "Error: HTTP-Response was " + httpCode;
    }
  }
  //payload.replace("ß","ss");
  //Serial.println(payload);
  
  display.fillRect(x,y,sx,sy,GxEPD_WHITE);
  display.drawRect(x-1,y-1,sx+2,sy+2,GxEPD_BLACK);
  u8g2Fonts.setFont(u8g2_font_profont22_tf);
  drawStringTransparent(x+10,y+(sy/2),/*payload*/text,LEFT);
}

// Startet eine WiFi-Verbindung zu den in 'owm_credentials.h' angegebenen Daten
/**
 * Tries to establish a connection to the network specified in 'owm_credentials.h' file.
 * @return {uint8_t}  : State of WiFi connection
 */
uint8_t startWiFi() {
  IPAddress local_IP(10, 23, 16, 2);
  // Set your Gateway IP address
  IPAddress gateway(10, 23, 16, 1);

  IPAddress subnet(255, 255, 255, 0);
  IPAddress primaryDNS(10, 250, 0, 20);   //optional

  WiFi.config(local_IP,gateway,subnet,primaryDNS);
  //Serial.print("ESP Mac Address: ");
  //Serial.println(WiFi.macAddress());
  //Serial.print("\r\nConnecting to: ");
  //Serial.println(String(ssid));
  WiFi.disconnect();
  WiFi.mode(WIFI_STA); // switch off AP
  WiFi.setAutoConnect(true);
  WiFi.setAutoReconnect(true);
  WiFi.begin(ssid, password);
  unsigned long start = millis();
  uint8_t connectionStatus;
  bool AttemptConnection = true;
  while (AttemptConnection) {
    connectionStatus = WiFi.status();
    if (millis() > start + 15000) { // Wait 15-secs maximum
      AttemptConnection = false;
    }
    if (connectionStatus == WL_CONNECTED || connectionStatus == WL_CONNECT_FAILED) {
      AttemptConnection = false;
    }
    delay(50);
  }
  if (connectionStatus == WL_CONNECTED) {
    wifi_signal = WiFi.RSSI(); // Get Wifi Signal strength now, because the WiFi will be turned off to save power!
    //Serial.println("");
    //Serial.println("WiFi connected!");
    //Serial.print("IP address: ");
    //Serial.println(WiFi.localIP());
    //Serial.print("Subnet Mask: ");
    //Serial.println(WiFi.subnetMask());
    //Serial.print("Gateway IP: ");
    //Serial.println(WiFi.gatewayIP());
    //Serial.print("DNS: ");
    //Serial.println(WiFi.dnsIP());
  }
  //else Serial.println("WiFi connection *** FAILED ***");

  HTTPClient http;
  String link = "https://intradev.consol.de";
  //Serial.println(link);
  ////Serial.println(ESP.getFreeHeap());
  http.begin(link, ca);
  int httpCode = http.GET();
  if (httpCode > 0) {
    //Serial.printf("[HTTP] GET... code: %d\n", httpCode);
    // file found at server
    if (httpCode == HTTP_CODE_OK) {
      String x = http.getString().substring(22);
      //Serial.println("\n\n\n\n");
      //Serial.println(x);
    }
  }
  ////Serial.println(connectionStatus);
  return connectionStatus;
}

/**
 * Stops the WiFi connection.
 */
void stopWiFi() {
  WiFi.disconnect();
  WiFi.mode(WIFI_OFF);
}

/**
 * Is used by setupTime() for applying time of the remote NTP server.
 * @return {boolean}  : Only true if succesfully obtained time
 */
boolean updateLocalTime() {
  char   time_output[30], day_output[30], update_time[30];
  //Serial.println("Update Local Time!");
  while (!getLocalTime(&timeinfo, 10000)) { // Wait for 5-sec for time to synchronise
    //Serial.println("Failed to obtain time");
    return false;
  }
  CurrentHour = timeinfo.tm_hour;
  CurrentMin  = timeinfo.tm_min;
  CurrentSec  = timeinfo.tm_sec;
  CurrentYear  = timeinfo.tm_year;
  CurrentMonth  = timeinfo.tm_mon;
  CurrentMDay  = timeinfo.tm_mday;
  CurrentDST = timeinfo.tm_isdst;
  //See http://www.cplusplus.com/reference/ctime/strftime/
  if (Units == "M") {
    if (Language == "DE") {
      sprintf(day_output, "%s, %02u. %s %04u", weekday_D[timeinfo.tm_wday], timeinfo.tm_mday, month_M[timeinfo.tm_mon], (timeinfo.tm_year) + 1900); // day_output >> So., 23. Juni 2019 <<
    }
    else
    {
      sprintf(day_output, "%s  %02u-%s-%04u", weekday_D[timeinfo.tm_wday], timeinfo.tm_mday, month_M[timeinfo.tm_mon], (timeinfo.tm_year) + 1900);
    }
    strftime(update_time, sizeof(update_time), "%H:%M:%S", &timeinfo);  // Creates: '@ 14:05:49'   and change from 30 to 8 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    sprintf(time_output, "%s", update_time);
  }
  else
  {
    strftime(day_output, sizeof(day_output), "%a  %b-%d-%Y", &timeinfo); // Creates  'Sat May-31-2019'
    strftime(update_time, sizeof(update_time), "%r", &timeinfo);         // Creates: '@ 02:05:49pm'
    sprintf(time_output, "%s", update_time);
  }

  date_str = day_output;
  time_str = time_output;

  return true;
}

// Bezieht Zeit von (Consol-)NTP-Server
/**
 * 
 * @param  {String} ntpAddress : Applies the time of an NTP server 
 * @return {boolean}           : Returns the boolean of updateLocalTime() -> Only true if succesfully obtained time
 */
boolean setupTime(const char* ntpAddress) {
  //Serial.println("Setup Time!");
  configTime(gmtOffset_sec, daylightOffset_sec, ntpAddress); //(gmtOffset_sec, daylightOffset_sec, ntpServer)
  setenv("TZ", Timezone, 1);  //setenv()adds the "TZ" variable to the environment with a value TimeZone, only used if set to 1, 0 means no change
  tzset(); // Set the TZ environment variable
  delay(100);
  bool timeStatus = updateLocalTime();
  return timeStatus;
}
/**
 * Checks if the time has changed since last session. Uses database to check last log.
 * @return {boolean}  : Only true if the time has changed
 */
boolean hasTimeChanged() {
  int last_val = getValueOfLastLog("current_hour").toInt();
  if (last_val != CurrentHour) return true;
  else return false;
}
/**
 * Draws text with maximum pixel width. Unsure how it works, is unused.
 * @param  {int} x                   : X-Coordinate
 * @param  {int} y                   : Y-Coordinate
 * @param  {unsigned int} text_width : Maximum width along the Y-Axis defined in pixels
 * @param  {String} text             : Text to render
 * @param  {alignment} align         : Alignment to coordinates (As String; Valid options: LEFT, RIGHT, CENTER)
 */
void drawStringMaxWidth(int x, int y, unsigned int text_width, String text, alignment align) {
  int16_t  x1, y1; //the bounds of x,y and w and h of the variable 'text' in pixels.
  uint16_t w, h;
  display.getTextBounds(text, x, y, &x1, &y1, &w, &h);
  if (align == RIGHT)  x = x - w;
  if (align == CENTER) x = x - w / 2;
  u8g2Fonts.setCursor(x, y);
  if (text.length() > text_width * 2) {
    u8g2Fonts.setFont(u8g2_font_helvB10_tf);
    text_width = 42;
    y = y - 3;
  }
  u8g2Fonts.println(text.substring(0, text_width));
  if (text.length() > text_width) {
    u8g2Fonts.setCursor(x, y + h + 15);
    String secondLine = text.substring(text_width);
    secondLine.trim(); // Remove any leading spaces
    u8g2Fonts.println(secondLine);
  }
}

/**
 * Initializes display and resets the screen buffer to white. Needed every startup.
 */
void initialiseDisplay() {
  display.init(115200);
  SPI.end();
  SPI.begin(EPD_SCK, EPD_MISO, EPD_MOSI, EPD_CS);
  u8g2Fonts.begin(display); // connect u8g2 procedures to Adafruit GFX
  u8g2Fonts.setFontMode(1);                  // use u8g2 transparent mode (this is default)
  u8g2Fonts.setFontDirection(0);             // left to right (this is default)
  u8g2Fonts.setForegroundColor(GxEPD_BLACK); // apply Adafruit GFX color
  u8g2Fonts.setBackgroundColor(GxEPD_WHITE); // apply Adafruit GFX color
  u8g2Fonts.setFont(u8g2_font_helvB10_tf);   // select u8g2 font from here: https://github.com/olikraus/u8g2/wiki/fntlistall
  display.fillScreen(GxEPD_WHITE);
  display.setFullWindow();
}

/**
 * Renders all elements. Insert all draw functions you want displayed here!
 */
void renderScreen() {
  //DrawConsolLogo(15, 27);
  u8g2Fonts.setFont(u8g2_font_helvB18_tf);
  display.drawLine(0, 42, SCREEN_WIDTH, 42, GxEPD_BLACK);
  
  drawCurrentRoom(35, 127, 117, 257, 38, 8, 2, "2C.46","br.2c.46");
  drawRoom(186, 127, 117, 257, 38, 8, 1, "2C.44","br.2c.44");
  drawRoom(337, 127, 117, 257, 38, 8, 2, "2B.12","br.2b.12");
  drawRoom(488, 127, 117, 257, 38, 8, 1, "2A.26","br.2a.26");
  
  drawHeadingSection("2C.46","br.2c.46");
  drawTimeHeader(172, 150, 38, CurrentHour, 7);
  drawTimeHeader(473, 150, 38, CurrentHour, 7);

  //drawBottomMessage(0,SCREEN_HEIGHT-20,SCREEN_WIDTH,20);
}

// Wird beim Start ausgeführt
void setup() {
  StartTime = millis();
  if (startWiFi() == WL_CONNECTED && setupTime("ntp.consol.de") == true) {
    boolean headerChanged = hasHeadingChanged("br.2c.46");
    boolean jsonChanged = getEventJsonAsString();
    boolean timeChanged = hasTimeChanged();
    ////Serial.printf("CH: %d | WT : %d\n",CurrentHour,WakeupTime);
    Serial.println("Should I wake up? : (" + String(CurrentHour >= WakeupTime) + " || " + String(CurrentHour <= SleepTime) + ") && (" + String(headerChanged) + " || " + String(jsonChanged) + " || " + String(timeChanged) + ")");
    if (((CurrentHour >= WakeupTime && CurrentHour <= SleepTime) && (jsonChanged || headerChanged || timeChanged)) == true) {
      initialiseDisplay(); // Give screen time to initialise by getting weather data!
      //Serial.println("Should I wake up? : (" + String(CurrentHour >= WakeupTime) + " || " + String(CurrentHour <= SleepTime) + ") && (" + String(headerChanged) + " || " + String(jsonChanged) + " || " + String(timeChanged) + ")");
      Serial.println("Without this text microcontroller sometimes randomly freezes. DONT REMOVE ME!");
      renderScreen();
      drawBottomMessage(0,SCREEN_HEIGHT-20,SCREEN_WIDTH,20,text);
      ldrString = String(CurrentYear+1900) + "-" + String(CurrentMonth)+"-"+String(CurrentMDay)+"%"+String(CurrentHour)+":"+String(CurrentMin)+":"+String(CurrentSec);
      display.display(false); // Full screen update mode
      //Serial.println("Done full screen update!");
    } else {
      HTTPClient http;
      http.begin("https://intradev.consol.de/scripts/writelog.php?res="+ressource+"&sel=last_display_refresh",ca);
      ldrString = http.getString().substring(22);
      http.begin("https://intradev.consol.de/scripts/currententry.php?t=1599726789&r=br.2c.46", ca);
      String temp = http.getString().substring(22);
      if (temp.equals("null")) jsonEntryId = "0";
      else if () 
    }
    //Serial.println("Should I wake up? : (" + String(CurrentHour >= WakeupTime) + " || " + String(CurrentHour <= SleepTime) + ") && (" + String(headerChanged) + " || " + String(jsonChanged) + " || " + String(timeChanged) + ")");
  }
  writeLog();
  stopWiFi();
  beginSleep();
}

// Wird nie aufgerufen, aber benötigt um zu compilen
void loop() {
  //---
}